services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: amr_frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=http://backend:8000
    networks:
      - amr-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: amr_api
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - DB_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URI=redis://redis:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - WEB_CONCURRENCY=4
    ports:
      - "8000:8000"
    networks:
      - amr-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  n8n:
    image: n8nio/n8n
    container_name: amr_n8n
    restart: always
    ports:
      - "5678:5678"
    env_file:
      - ./n8n/.env.n8n
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=amr_n8n
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./n8n:/home/node/.n8n
    depends_on:
      - db
    networks:
      - amr-network

  db:
    image: postgres:14-alpine
    container_name: amr_db
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - amr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: amr_redis
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - amr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: amr_elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - amr-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: amr_kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - amr-network
  
  ai_model:
    build:
      context: ./ai-model
      dockerfile: Dockerfile
      target: production
    container_name: amr_ai_model
    working_dir: /app
    volumes:
      - ./ai-model:/app
    command: sh -c "pip install -r requirements.txt && python app.py"  
    ports:
      - "8500:8500"
    environment:
      # Dans le mode production, on suppose qu'Ollama est accessible via un service nomm√© "ollama"
      - OLLAMA_API_URL=http://ollama:11434/run
      - OLLAMA_MODEL=amour-model
      - MODEL_ENV=production
    networks:
      - amr-network

  nginx:
    image: nginx:alpine
    container_name: amr_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - amr-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  amr-network:
    driver: bridge
    attachable: true

volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
