services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    environment:
      - NODE_ENV=development
      - DEBUG=true
      - API_BASE_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      # Optionnel : monter le dossier .nuxt pour préserver le cache de build local si souhaité
      - ./frontend/.nuxt:/app/.nuxt
    ports:
      - "3000:3000"
      - "24678:24678"  # Port de debug pour Vite (si utilisé)
    tmpfs:
      - /tmp

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app
    environment:
      - PYTHON_ENV=development
      - DEBUG=true
      - PYTHONBREAKPOINT=ipdb.set_trace
      - DB_URI=postgresql://${DEV_POSTGRES_USER}:${DEV_POSTGRES_PASSWORD}@db:5432/${DEV_POSTGRES_DB}
    volumes:
      - ./backend:/app
      - ./backend/.ipython:/root/.ipython   # Pour conserver l'historique IPython
    ports:
      - "8000:8000"
    #  - "5678:5678"  # Port de debug pour debugpy ou autres outils
    tmpfs:
      - /tmp

  db:
    environment:
      - POSTGRES_USER=${DEV_POSTGRES_USER}
      - POSTGRES_PASSWORD=${DEV_POSTGRES_PASSWORD}
      - POSTGRES_DB=${DEV_POSTGRES_DB}
    volumes:
      - ./postgres-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DEV_POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s

  ai_model:
    build:
      context: ./ai-model
      dockerfile: Dockerfile
      target: development
    environment:
      - MODEL_ENV=development
      - OLLAMA_API_URL=http://host.docker.internal:11434/run
      - OLLAMA_MODEL=amour-model-dev
      - DEBUG=true
    volumes:
      - ./ai-model:/app
      # Monter un cache local pour pip (ou autre) si nécessaire
      - ./ai-model/.cache:/root/.cache
    ports:
      - "8500:8500"
      - "8501:8501"  # Port pour debug éventuel

  n8n:
    image: n8nio/n8n
    environment:
      - N8N_DEV=true
      - N8N_HOST=0.0.0.0
    ports:
      - "5679:5678"
    volumes:
      - ./n8n:/home/node/.n8n

  elasticsearch:
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    tmpfs:
      - /tmp
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    ports:
      - "5601:5601"

  logviewer:
    build:
      context: ./logviewer
      dockerfile: Dockerfile  # Assurez-vous que ce Dockerfile inclut un stage 'development'
      target: development
    ports:
      - "9000:9000"
    volumes:
      - ./app.log:/app.log  # Vérifiez que le fichier de log est accessible
    environment:
      - PYTHON_ENV=development

  # Services de support développement
  mailhog:
    image: mailhog/mailhog
    ports:
      - "8025:8025"  # Interface web
      - "1025:1025"  # SMTP

  traefik:
    image: traefik:v2.9
    volumes:
      - "./traefik/traefik.dev.toml:/traefik.toml:ro"
    command:
      # En développement, activer l'API insecure pour faciliter le debug
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "8080:80"  # Mappez le port 80 du conteneur sur 8080 sur l'hôte
    networks:
      - amr-network

networks:
  amr-network:
    driver: bridge
    attachable: true
